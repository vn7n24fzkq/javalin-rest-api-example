/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package javalin.rest.api.example

import io.javalin.Javalin
import io.javalin.core.security.Role
import io.javalin.core.security.SecurityUtil.roles
import io.javalin.apibuilder.ApiBuilder.*
import io.javalin.http.Context
import io.javalin.plugin.openapi.annotations.*
import io.javalin.plugin.openapi.*
import io.javalin.plugin.openapi.ui.SwaggerOptions
import io.swagger.v3.oas.models.info.Info
import io.swagger.v3.oas.models.security.SecurityScheme
import io.swagger.v3.oas.models.OpenAPI

enum class AppRole : Role { ANYONE, LOGGED_IN }

data class User(
    var id:Int,
    var name:String
)

 private val openApiOptions: OpenApiOptions
        get() {
            val initialConfigurationCreator = {
                OpenAPI()
                        .info(Info().version("1.0").description("api").title("Javalin API"))
            }
            return OpenApiOptions(initialConfigurationCreator)
                    .roles(roles(Roles.ANYONE))
                    .path("/swagger-docs")
                    .swagger(SwaggerOptions("/swagger").title("Crabo API Documentation"))
        }
fun main(args: Array<String>) {
    val app = Javalin.create{ config->
        config.accessManager{ handle,context,role->
            when{
                AppRole.ANYONE in role-> handle.handle(context)
                AppRole.LOGGED_IN in role && context.basicAuthCredentialsExist()->
                    { handle.handle(context)}
                else->{context.status(401)}

                }
            }

        }.routes{
            path("users"){
                get(UserController::getAllUser,roles(AppRole.LOGGED_IN))
                get(":id",UserController::getUserById)
                post(UserController::createUser)
                put(UserController::updateUser)
                delete(":id",UserController::removeUserById)
            }
        }.start(7000)
        app.exception(Exception::class.java){_,ctx->
            ctx.result("error")
            ctx.status(500)
        }
    }


    val users = hashMapOf(
        1 to User(id=1,name="Android"),
        2 to User(id=2,name="Java"),
        3 to User(id=3,name="Kotlin")
    )

    object UserController{

        fun createUser(ctx:Context){
            ctx.bodyValidator<User>().get().apply{ 
                if(!users.containsKey(this.id))
                users.put(this.id,this)
                else
                ctx.status(400)
            }
        }

        @OpenApi(
            requestBody = OpenApiRequestBody(User::class),
            responses = [
            OpenApiResponse("400", Unit::class),
            OpenApiResponse("201", Unit::class)
            ]
        )
        fun getAllUser(ctx:Context){
            ctx.json(users.values)
        }

        fun getUserById(ctx:Context){
            val user = users.get(
                ctx.pathParam("id").toInt()
            )
            user?.let{
                ctx.json(it)
            }?:ctx.status(400)
        }

        fun removeUserById(ctx:Context){
            val id = ctx.pathParam("id").toInt()
            users.remove(id)
        }

        fun updateUser(ctx:Context){
            ctx.bodyValidator<User>().get().apply{ 
                if(users.containsKey(this.id))
                users.put(this.id,this)
                else
                ctx.status(400)
            }
        }
    }

